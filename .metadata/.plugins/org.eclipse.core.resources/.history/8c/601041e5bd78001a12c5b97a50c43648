package com.ElasticSearch.Configuration;

import java.net.InetAddress;
import java.net.UnknownHostException;

import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.data.elasticsearch.core.ElasticsearchEntityMapper;
import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.EntityMapper;
import org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;

@Configuration
@EnableElasticsearchRepositories(basePackages = "com.ElasticSearch.Repository")
public class ElasticConfiguration {

	@Override
	  public RestHighLevelClient elasticsearchClient() {
	JAVA
	return RestClients.create(ClientConfiguration.create("localhost:9200")).rest }

	@Bean
	  @Override
	  public EntityMapper entityMapper() {
	ElasticsearchEntityMapper entityMapper = new ElasticsearchEntityMapper( elasticsearchMappingContext(), new DefaultConversionService());
	entityMapper.setConversions(elasticsearchCustomConversions()); 1 return entityMapper;
	}

	@Bean
	  @Override
	  public ElasticsearchCustomConversions elasticsearchCustomConversions() {
	return new ElasticsearchCustomConversions(
	Arrays.asList(new AddressToMap(), new MapToAddress())); 2
	}

	@WritingConverter 3
	static class AddressToMap implements Converter<Address, Map<String, Object>> {
	    @Override
	    public Map<String, Object> convert(Address source) {
	LinkedHashMap<String, Object> target = new LinkedHashMap<>(); target.put("ciudad", source.getCity());
	// ...
	      return target;
	    }
	}

	@ReadingConverter 4
	static class MapToAddress implements Converter<Map<String, Object>, Address> {
	    @Override
	    public Address convert(Map<String, Object> source) {
	// ...
	      return address;
	    }
	}
}}
