package com.ElasticSearch.Configuration;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.tomcat.jni.Address;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.data.convert.ReadingConverter;
import org.springframework.data.convert.WritingConverter;
import org.springframework.data.elasticsearch.client.ClientConfiguration;
import org.springframework.data.elasticsearch.client.RestClients;
import org.springframework.data.elasticsearch.core.ElasticsearchEntityMapper;
import org.springframework.data.elasticsearch.core.ElasticsearchTemplate;
import org.springframework.data.elasticsearch.core.EntityMapper;
import org.springframework.data.elasticsearch.core.convert.ElasticsearchCustomConversions;
import org.springframework.data.elasticsearch.repository.config.EnableElasticsearchRepositories;

@Configuration
@EnableElasticsearchRepositories(basePackages = "com.ElasticSearch.Repository")
public class ElasticConfiguration {

	@Override
	public RestHighLevelClient elasticsearchClient() {
		return RestClients.create(ClientConfiguration.create("localhost:9200")).rest();
	}

	@Bean
	  @Override
	  public EntityMapper entityMapper() {
	ElasticsearchEntityMapper entityMapper = new ElasticsearchEntityMapper( elasticsearchMappingContext(), new DefaultConversionService());
	entityMapper.setConversions(elasticsearchCustomConversions()); 1 return entityMapper;
	}

	@Bean
	  @Override
	  public ElasticsearchCustomConversions elasticsearchCustomConversions() {
	return new ElasticsearchCustomConversions(
	Arrays.asList(new AddressToMap(), new MapToAddress())); 2
	}

	@WritingConverter
	static class AddressToMap implements Converter<Address, Map<String, Object>> {
		@Override
		public Map<String, Object> convert(Address source) {
			LinkedHashMap<String, Object> target = new LinkedHashMap<>();
			target.put("ciudad", source.getCity());
			// ...
			return target;
		}
	}

	@ReadingConverter
	static class MapToAddress implements Converter<Map<String, Object>, Address> {
		@Override
		public Address convert(Map<String, Object> source) {
			// ...
			return address;
		}
	}
}}
